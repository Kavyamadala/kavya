void merge_sort(int* nums,int l,int h);
void merge(int* nums, int l, int m, int h);
int* sortArray(int* nums, int numsSize, int* returnSize){
    int low=0;
    int high=numsSize-1;
    int* res=malloc(sizeof(int)*numsSize);
    merge_sort(nums,low,high);
    int i;
    for(i=0; i<numsSize; i++)
    {
        res[i]=nums[i];
    }
    *returnSize=numsSize;
    return res;
}
void merge_sort(int* nums,int l,int h)
{
    if(h>l)
    {
        int mid=(l+h)/2;
        merge_sort(nums,l,mid);
        merge_sort(nums,mid+1,h);
        merge(nums,l,mid,h);
    }
}
void merge(int* nums, int l, int m, int h)
{
    int i,j;
    int k=l;
    int a,b;
    a=m-l+1;
    b=h-m;
    int left[a], right[b];
    for(i=0; i<a; i++)
    {
        left[i]=nums[i+l];
    }
    for(j=0; j<b; j++)
    {
        right[j]=nums[j+m+1];
    }
    i=j=0;
    while(i<a && j<b)
    {
        if(left[i]<right[j])
        {
            nums[k]=left[i];
            i++;
        }
        else
        {
            nums[k]=right[j];
            j++;
        }
        k++;
        
    }
    while(i<a)
    {
        nums[k]=left[i];
        i++;
        k++;
        
    }
    while(j<b)
    {
        nums[k]=right[j];
        j++;
        k++;
    }
    
    
    
}
